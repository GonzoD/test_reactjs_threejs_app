{"version":3,"sources":["components/InputForm/index.jsx","components/SelectListOfGeometry/index.jsx","components/GeometryModel/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","margin","InputForm","props","classes","Box","className","component","noValidate","autoComplete","TextField","id","variant","label","value","scale","onChange","handleChange","geometryModel","SelectListOfGeometry","FormControl","fullWidth","InputLabel","Select","labelId","geometry","map","item","index","MenuItem","geometryObject","mesh","getRandomInt","setScale","ref","position","attach","args","color","GeometryModel","geometryType","min","max","Math","ceil","floor","random","userData","display","flexDirection","height","button","backgroundColor","listOfUUIDs","bottom","itemInListOfUUIDs","alignItems","border","borderRadius","justifyContent","App","React","useState","setGeometry","listOfModels","setListOfModels","Mesh","THREE","useRef","uuid","app","event","target","Button","onClick","isNaN","style","intensity","castShadow","rotation","PI","OrbitControls","IconButton","filter","model","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf3bed71.chunk.js","sourcesContent":["import {makeStyles} from '@material-ui/styles'\r\nimport {Box, TextField} from'@mui/material'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    width: '120px',\r\n    margin: '10px'\r\n  }\r\n}))\r\n\r\nfunction InputForm(props) {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Box\r\n    className={classes.root}\r\n    component=\"form\"\r\n    noValidate\r\n    autoComplete=\"off\"\r\n    >\r\n      <TextField\r\n          id=\"outlined-multiline-flexible\"\r\n          variant=\"outlined\"\r\n          label=\"Scale\"\r\n          value={props.scale}\r\n          onChange={props.handleChange}\r\n        />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default InputForm;","import {makeStyles} from '@material-ui/styles'\r\nimport {Box, FormControl, InputLabel, Select, MenuItem} from'@mui/material'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        width: '120px',\r\n        margin: '10px'\r\n    }\r\n}))\r\n\r\nconst geometryModel = ['Cube', 'Sphere', 'Pyramid']\r\n\r\nfunction SelectListOfGeometry(props) {\r\n  const classes = useStyles()\r\n\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"demo-simple-select-label\">Geometry</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          value={props.geometry}\r\n          label=\"Geometry\"\r\n          onChange={props.handleChange}\r\n        >\r\n            {geometryModel.map((item, index) => {return <MenuItem value={item} key={index}>{item}</MenuItem>})}\r\n        </Select>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default SelectListOfGeometry;","import React from 'react';\r\n\r\nconst geometryObject = {\r\n    'Cube': (scale, mesh, getRandomInt) => {\r\n        const setScale = 1*scale\r\n        return <mesh ref={mesh} position={[getRandomInt(-15, 15), getRandomInt(-12, -2), getRandomInt(-20, -5)]}>\r\n        <boxBufferGeometry attach='geometry' args={[setScale, setScale, setScale]} />\r\n        <meshStandardMaterial attach='material' color={'#e54f6e'} />\r\n    </mesh>\r\n    },\r\n    'Sphere': (scale, mesh, getRandomInt) => {\r\n        return <mesh ref={mesh} position={[getRandomInt(-15, 15), getRandomInt(-12, -2), getRandomInt(-20, -5)]}>\r\n        <sphereGeometry attach='geometry' args={[scale, 64, 64, 0, 6.3, 0, 6.3]}/>\r\n        <meshStandardMaterial attach='material' color={'#009894'} />\r\n    </mesh>\r\n    },\r\n    'Pyramid': (scale, mesh, getRandomInt) => {\r\n        const setScale = 1*scale\r\n        return <mesh ref={mesh} position={[getRandomInt(-15, 15), getRandomInt(-12, -2), getRandomInt(-20, -5)]}>\r\n        <coneBufferGeometry attach='geometry' args={[setScale, setScale, 4]} />\r\n        <meshStandardMaterial attach='material' color={'#d9ad26'} />\r\n    </mesh>\r\n    },\r\n}\r\n\r\nfunction GeometryModel(props) {\r\n\r\n    const getRandomInt = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min\r\n      }\r\n\r\n  return (\r\n        <>\r\n        {geometryObject[props.geometryType](props.scale, props.mesh, getRandomInt)}\r\n        </>\r\n  );\r\n}\r\n\r\nexport default GeometryModel;","import React, {useRef} from 'react';\nimport {Button} from'@mui/material'\nimport {makeStyles} from '@material-ui/styles'\nimport InputFormForm from './components/InputForm';\nimport SelectListOfGeometry from './components/SelectListOfGeometry';\nimport GeometryModel from './components/GeometryModel';\nimport { OrbitControls } from '@react-three/drei'\nimport { Canvas } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport CloseIcon from '@mui/icons-material/Close';\nimport IconButton from '@mui/material/IconButton';\n\nconst useStyles = makeStyles(() => ({\n  userData: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '100%',\n    height: '100%'\n  },\n  button: {\n    height: '55px',\n    '&.css-1e6y48t-MuiButtonBase-root-MuiButton-root': {\n      backgroundColor: 'black',\n      margin: '10px',\n    }\n  },\n  listOfUUIDs: {\n    display: 'flex',\n    flexDirection: 'column',\n    position: 'absolute',\n    bottom: 0,\n  },\n  itemInListOfUUIDs: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    border: '1px solid',\n    borderRadius: '3px',\n    margin: '1px',\n    justifyContent: 'space-between'\n  }\n}))\n\n\nfunction App() {\n  const classes = useStyles()\n  const [geometry, setGeometry] = React.useState('');\n  const [scale, setScale] = React.useState('');\n  const [listOfModels, setListOfModels] = React.useState([]);\n  const Mesh = new THREE.Mesh()\n  const mesh = useRef(Mesh)\n  const uuid = Mesh.uuid\n\n  const handleChangeSelectList = (event) => {\n    setGeometry(event.target.value);\n  };\n\n  const handleChangeInputForm = (event) => {\n    setScale(event.target.value);\n  };\n\n  const createNewModel = () => {\n    const item = (geometry && scale && {'component':(index) => <GeometryModel key={index} geometryType={geometry} scale={scale} mesh={mesh}/>, 'uuid': uuid})\n    item && isNaN(scale) === false && setListOfModels([...listOfModels, item])\n  }\n\n  return (\n    <div className={classes.app}>\n      <div className={classes.userData}>\n      <SelectListOfGeometry geometry={geometry} handleChange={handleChangeSelectList}/>\n      <InputFormForm scale={scale} handleChange={handleChangeInputForm}/>\n      <Button className={classes.button} onClick={createNewModel}>\n        Create\n      </Button>\n      </div>\n      <Canvas style={{height: '900px', backgroundColor: '#eeeeee'}}>\n      <ambientLight intensity={0.5} />\n          <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.7}\n        />\n            <pointLight position={[-10, 0, -20]} intensity={0.2}/>\n            <pointLight position={[0, -10, 0]} intensity={0.2}/>\n        <group>\n          <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -15, -5]}>\n            <planeBufferGeometry attach='geometry' args={[100, 100]}/>\n            <meshStandardMaterial attach='material' color={'#6a869f'} />\n          </mesh>\n        </group>\n        {listOfModels.map((item, index) => {\n          return item.component(index)\n        })}\n        <OrbitControls position='40'/>\n      </Canvas>\n      <div className={classes.listOfUUIDs}>\n      {listOfModels.map((item, index) => {\n          return <div key={index} className={classes.itemInListOfUUIDs}>\n            {item.uuid}\n            <IconButton onClick={function() {\n              if (index !== -1) {\n                setListOfModels(listOfModels.filter((model, id) => id !== index))\n              }\n            }}>\n              <CloseIcon />\n              </IconButton>\n            </div>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}